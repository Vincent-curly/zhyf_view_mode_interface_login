"""
Django settings for PrescriptionPushSystem project.

Generated by 'django-admin startproject' using Django 3.2.12.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
import time
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-1px!9c-j_la2tuc6_50rwvj58k&p*8o7tm9-w66o0ws679q9x@'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'management',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'management.log_middleware.RequestLogMiddleware',
]

X_FRAME_OPTIONS = 'SAMEORIGIN'

ROOT_URLCONF = 'PrescriptionPushSystem.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'PrescriptionPushSystem.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

# LANGUAGE_CODE = 'en-us'
LANGUAGE_CODE = 'zh-hans'

# TIME_ZONE = 'UTC'
TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [                                # 当界面显示有问题加载不出样式时，关注下这里有没有设置
    os.path.join(BASE_DIR, 'static'),
]

RESOURCES_DIRS = [
    os.path.join(BASE_DIR, 'resources'),
]

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

log_path = os.path.join(BASE_DIR, 'logs')
if not os.path.exists(log_path):
    os.mkdir(log_path)                                   # 如果不存在这个日志文件夹，则自动创建一个

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,                                  # 禁止默认的记录器
    'formatters': {
        'standard': {
            'format': '[%(asctime)s] %(name)s:[%(levelname)s]:[%(module)s:'
                      '%(funcName)s:%(lineno)d]:[%(processName)s:%(process)d]:%(message)s'
        },
        'accessfmt': {
            'format': '%(sip)s -- [%(asctime)s] %(levelname)s %(message)s'
        },
    },
    'filters': {
        'request_info': {
            '()': 'management.log_middleware.RequestLogFilter'
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'default': {
            'level': 'DEBUG',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(log_path, 'all-{}.log'.format(time.strftime('%Y-%m-%d'))),
            'formatter': 'standard',
            'encoding': 'utf-8',
            'backupCount': 7,
            'when': 'midnight',
        },
        'access': {
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(log_path, 'access-{}.log'.format(time.strftime('%Y-%m-%d'))),
            'filters': ['request_info'],
            'backupCount': 7,  # 备份数
            'formatter': 'accessfmt',  # 输出格式
            'encoding': 'utf-8',  # 设置默认编码
            'when': 'midnight',
        },
        'backstage': {
            'level': 'DEBUG',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(log_path, 'web-{}.log'.format(time.strftime('%Y-%m-%d'))),
            'formatter': 'standard',
            'encoding': 'utf-8',
            'backupCount': 7,
            'when': 'midnight',
        },
        'timer': {
            'level': 'DEBUG',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(log_path, 'localhost-{}.log'.format(time.strftime('%Y-%m-%d'))),
            'formatter': 'standard',
            'encoding': 'utf-8',
            'backupCount': 7,
            'when': 'midnight',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'standard',
        },
    },
    'loggers': {
        # 类型 为 django 处理所有类型的日志， 默认调用
        '': {
            'handlers': ['default'],
            'level': 'INFO',
            'propagate': False
        },
        'django': {
            'handlers': ['console', 'access'],
            'level': 'INFO',
            'propagate': False
        },
        'web.log': {
            'handlers': ['access'],
            'level': 'INFO',
            'propagate': False
        },
        'web': {
            'handlers': ['backstage'],
            'propagate': False,
            'level': 'INFO'
        },
        'PrescriptionPushSyetem.uploadTimer': {
            'handlers': ['timer'],
            'propagate': False,
            'level': 'DEBUG'
        },

    }
}
